import warnings
import pandas as pd
from sdv.evaluation import evaluate

from sdv.metrics.tabular import BinaryDecisionTreeClassifier, BinaryAdaBoostClassifier,\
    BinaryLogisticRegression, BinaryMLPClassifier, BNLikelihood, LogisticDetection,\
    CSTest, KSTest

"""
Evaluation of datasets generated by the model
"""

# Ingore pandas and python warnings
warnings.filterwarnings('ignore')
pd.options.mode.chained_assignment = None


def print_similarity(title, ontology_dataset_fn, sampled_dataset_fn, seen=True):
    """Compute various metrics to evaluate the generated datasets.

    Args:
        title (str):
            Info about the dataset and training.
        ontology_dataset_fn (str):
            Patients dataset generated from the ontology.
        sampled_dataset_fn (str):
            Sampled patients dataset generated from the model.
        seen (bool):
            Whether pritns should include "seen" or "unseen". Defaults to True (seen).
    """
    sampled_patients = pd.read_csv(sampled_dataset_fn)
    sampled_patients.drop(columns=sampled_patients.columns[0], axis=1, inplace=True)
    ontology_patients = pd.read_csv(ontology_dataset_fn)
    # Aligning the ontology datasets columns with the columns of the sampled dataset (useful for unseen datasets)
    ontology_patients = ontology_patients[sampled_patients.columns]

    seen_text = 'seen' if seen else 'unseen'

    print(f'Results for {title}')
    print(f'Ontology {seen_text} Patients: {len(ontology_patients)}x{len(ontology_patients.columns)} Sampled {seen_text} Patients: {len(sampled_patients)}x{len(sampled_patients.columns)}')
    print(f'Similarity between ontology and sampled {seen_text} patients data: {evaluate(ontology_patients, sampled_patients):.3f}')

    print(f"CSTest, {seen_text}: {CSTest.compute(ontology_patients, sampled_patients):.3f}")
    print(f"KSTest, {seen_text}: {KSTest.compute(ontology_patients, sampled_patients):.3f}")
    print(f"BDT, {seen_text}: {BinaryDecisionTreeClassifier.compute(ontology_patients, sampled_patients, target='rare_disease'):.3f}")
    print(f"Ada, {seen_text}: {BinaryAdaBoostClassifier.compute(ontology_patients, sampled_patients, target='rare_disease'):.3f}")
    print(f"LR, {seen_text}: {BinaryLogisticRegression.compute(ontology_patients, sampled_patients, target='rare_disease'):.3f}")
    print(f"MLP, {seen_text}: {BinaryMLPClassifier.compute(ontology_patients, sampled_patients, target='rare_disease'):.3f}")
    # print(f"BN, {seen_text}: {BNLikelihood.compute(ontology_patients, sampled_patients):.3f}")
    print(f"LD, {seen_text}: {LogisticDetection.compute(ontology_patients, sampled_patients):.3f}")

    print('')  # line break


print_similarity(title='No embeddings Leukemia RDs, 600x50 dataset, 10000 epochs',
                 ontology_dataset_fn='../../../persistent/data/syn_data/syn_patients_data_seen_600_50_leukemia.csv',
                 sampled_dataset_fn='../../../persistent/model/no_embedding_final_sample_600_rows.csv',
                 seen=True
                )

print_similarity(title='RD embedding Leukemia RDs, 600x50 dataset, 5000 epochs',
                 ontology_dataset_fn='../../../persistent/data/syn_data/syn_patients_data_seen_600_50_leukemia.csv',
                 sampled_dataset_fn='../../../persistent/model/rd_embedding_final_sample_600_rows.csv',
                 seen=True
                )

print_similarity(title='ZSL Leukemia RDs, 600x50 dataset, 10000 epochs',
                 ontology_dataset_fn='../../../persistent/data/syn_data/syn_patients_data_seen_600_50_leukemia.csv',
                 sampled_dataset_fn='../../../persistent/model/leukemia_600_50_10000_epochs_seen_sample_600_rows.csv',
                 seen=True
                )

print_similarity(title='ZSL Leukemia RDs, 600x50 dataset, 10000 epochs',
                 ontology_dataset_fn='../../../persistent/data/syn_data/syn_patients_data_unseen_150_50_leukemia.csv',
                 sampled_dataset_fn='../../../persistent/model/leukemia_600_50_10000_epochs_unseen_sample_150_rows.csv',
                 seen=False
                )